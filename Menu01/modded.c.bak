#include <inttypes.h>
#include <stdlib.h>
#include <string.h>
#include <avr/delay.h>
#include "tinymenu.h"
#include "lcd.h"
//#include "spin_delay.h"
//#include "lcd_pcd8544.h"
//#include "lcd_pcd8544_text.h"

//#include "joystick.h"

#define JOYSTICK_UP 1
#define JOYSTICK_DOWN 2
#define JOYSTICK_LEFT 3
#define JOYSTICK_RIGHT 4
#define JOYSTICK_ENTER 5

void my_select(void *arg, char *name);
/*instantiate linked list here
 * Main
 * +Freq
 * |	Hz
 * | f
 * +Amplitude
 * | Vpp
 * | Vpk
 * | Offset
 * | Vmin
 * | Vrms
 * +Shape
 * | Sine
 * | Ramp
 * | Square
 * +Sync
 * | Duty_cycle
 * | Phase
 */

menu_t amp_sub1_menu = {  //new info
		.top_entry = 0, .current_entry = 0, .entry = { { .flags = 0, .select =
				my_select, .name = "s2", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s3", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s4", .value = 0, }, }, .num_entries = 3,
				.previous = NULL, };
menu_t status_sub_menu = {  //new info
		.top_entry = 0, .current_entry = 0, .entry = { { .flags = 0, .select =
				my_select, .name = "s2", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s3", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s4", .value = 0, }, }, .num_entries = 3,
				.previous = NULL, };

menu_t shape_sub1_menu = {  //new info
		.top_entry = 0, .current_entry = 0, .entry = { { .flags = 0, .select =
				my_select, .name = "s2", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s3", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s4", .value = 0, }, }, .num_entries = 3,
				.previous = NULL, };

menu_t sync_sub_menu = {  //new info
		.top_entry = 0, .current_entry = 0, .entry = { { .flags = 0, .select =
				my_select, .name = "s2", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s3", .value = 0, }, { .flags = 0, .select =
				my_select, .name = "s4", .value = 0, }, }, .num_entries = 3,
				.previous = NULL, };

menu_t freq_sub1_menu = { .top_entry = 0, .current_entry = 0, .entry = { {
		.flags = 0, .select = my_select, .name = "s5", .value = 0, }, { .flags =
		0, .select = my_select, .name = "s6", .value = 0, }, { .flags = 0,
		.select = my_select, .name = "s7", .value = 0, } }, .num_entries = 3,
		.previous = NULL, };
menu_t main_menu = { .top_entry = 0, .current_entry = 0, .entry = {
		{ .flags =
		MENU_FLAG_SUBMENU, .select = NULL, .name = "Status", .value =
				&status_sub_menu, }, { .flags = MENU_FLAG_SUBMENU, .select =
				NULL, .name = "Frequency", .value = &freq_sub1_menu, }, {
				.flags =
				MENU_FLAG_SUBMENU, .select = NULL,//function to be called onSelectAction
				.name = "Amplitude",	//name to be displayed on LCD
				.value = &amp_sub1_menu,	//address used to maintain context
		}, { .flags = MENU_FLAG_SUBMENU, .select = NULL, .name = "Wave Shape",
				.value = &shape_sub1_menu, }, { .flags = MENU_FLAG_SUBMENU,
				.select = NULL, .name = "Sync", .value = &sync_sub_menu, }, {
				.flags = 0,	//0 just means do not switch context. instead, call fxn.
				.select = my_select, .name = "something", .value = 0, } },
		.num_entries = 5,				//required for accurate height display
		.previous = NULL, };
menu_context_t menu_context = { .x_loc = 0, .y_loc = 0, .height = 4,
		.width = 18, .menu = NULL, };
void my_select(void *arg, char *name) {
	lcd_clear();
	lcd_puts("Selected: ");
	lcd_puts(name);
	ms_spin(750);
}

void adjust_value(menu_t *context) { /*reference by address to increase or decrease a
 *value. additional mod needed for ramping speed
 * context for this fxn is "adjust selected value"
 */
	int j = 0, t = 0;
	while (1) {

		delay(100);  //prevent runaway reading
		j = joystick_read();
		if (j == 0)
			t = 0;
		else {
			t++;	//for accelerating inc/dec action
			switch (j) {
			case JOYSTICK_LEFT:
				context->entry->value -= t;
				break;
			case JOYSTICK_RIGHT:
				context->entry->value += t;
				break;
			case JOYSTICK_ENTER:
				return;
			}

			menu_display(context);
		}

	}
}
int main() {
	uint8_t j;
	joystick_init();
	menu_enter(&menu_context, &main_menu);
	while (1) {
		ms_spin(50);
		j = joystick_read();
		switch (j) {
		case JOYSTICK_UP:
			menu_next_entry(&menu_context);
			break;
		case JOYSTICK_DOWN:
			menu_prev_entry(&menu_context);
			break;
		case JOYSTICK_LEFT:
			menu_exit(&menu_context);
			break;
		case JOYSTICK_RIGHT:
		case JOYSTICK_ENTER:
			menu_select(&menu_context);
			break;
		}
	}
}
